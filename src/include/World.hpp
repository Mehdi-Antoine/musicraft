#pragma once

#include <vector>

#include "Chunk.hpp"
#include "Window.hpp"


class World{
private:

	std::vector<Chunk> m_chunks;
	int m_current_chunk = 0;
	Window m_window;

public:

//--------------------------------------------------------------------------------------------------------------
//------------------------------------------------CONSTRUCTOR---------------------------------------------------
//--------------------------------------------------------------------------------------------------------------

	World();
	World(Window window);
	~World();

//--------------------------------------------------------------------------------------------------------------
//-------------------------------------------------GETTERS------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------

	Chunk& getChunk(int index);
	Chunk& getCurrentChunk();
	std::vector<Chunk>& getChunkVector();
	Window getWindow() const;
	int getWindowWidth() const;
	int getWindowHeight() const;
	int getIndexCurrentChunk() const;
	char getCubeType(const glm::vec3 &position) const;
	char getCubeType(float x, float y, float z) const;

//--------------------------------------------------------------------------------------------------------------
//-------------------------------------------------SETTERS------------------------------------------------------
//--------------------------------------------------------------------------------------------------------------

	void setCubeType(const glm::vec3 &position, char cube_type);

	//void setCubeType(float x, float y, float z, char cube_type);

//--------------------------------------------------------------------------------------------------------------
//------------------------------------------------FUNCTIONS-----------------------------------------------------
//--------------------------------------------------------------------------------------------------------------

	void addChunk(Chunk &chunk);

	
	
};
